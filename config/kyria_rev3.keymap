/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |
            bindings = <
            &kp ESC   &kp Q &kp W &kp E &kp R &kp T                                                  &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSLH
            &kp TAB   &kp A &kp S &kp D &kp F &kp G                                                  &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
            &kp LSHFT &kp Z &kp X &kp C &kp V &kp B &kp LSHFT &kp LSHFT            &mo 1   &kp LSHFT &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RCTRL
                                  &kp LGUI &kp DEL &kp RET &kp SPACE &kp ESC       &kp RET &kp SPACE &kp TAB &kp BSPC &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |
            bindings = <
            &trans &trans &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2              &trans &trans &trans &trans &trans &trans
            &trans &trans &trans     &bt BT_SEL 3 &bt BT_SEL 4 &trans                    &trans &trans &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans &trans
                                 &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
*/


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define RAISE 1
#define LOWER 2

&mt {
    tapping-term-ms = <200>;
};

&sensors {
    left_config {
        triggers-per-rotation = <36>;
    };

    right_config {
        triggers-per-rotation = <30>;
    };
};

/ {
    behaviors {
        left_encoder_rotate: left_encoder_rotate {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        };

        right_encoder_rotate: right_encoder_rotate {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&inc_dec_kp C_VOL_DN>, <&inc_dec_kp C_VOL_UP>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC  &kp Q  &kp W  &kp E     &kp R  &kp T                                                    &kp Y       &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp TAB  &kp A  &kp S  &kp D     &kp F  &kp G                                                    &kp H       &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&mo 3    &kp Z  &kp X  &kp C     &kp V  &kp B       &tog 4     &none         &none    &none      &kp N       &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
                       &kp C_PP  &mo 1  &kp LSHIFT  &kp LCTRL  &kp LEFT_GUI  &kp ESC  &kp SPACE  &kp RSHIFT  &mo 2  &kp C_PP
            >;

            sensor-bindings = <&left_encoder_rotate &right_encoder_rotate>;
            display-name = "QWERTY";
        };

        NUMBERS {
            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                                  &kp NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0     &trans
&trans     &trans  &trans  &kp LBKT  &kp RBKT  &trans                                  &kp HOME      &kp N4  &kp N5  &kp N6  &kp RIGHT  &trans
&trans     &trans  &trans  &trans    &trans    &trans  &trans  &trans  &trans  &trans  &kp END       &kp N1  &kp N2  &kp N3  &trans     &trans
                           &trans    &trans    &none   &trans  &trans   &trans  &trans  &trans        &kp N0  &kp N0
            >;

            display-name = "NUMBERS";
        };

        SYMBOLS {
            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                                  &kp CARET  &kp AMPS      &kp ASTRK     &kp MINUS  &kp EQUAL  &trans
&trans     &trans    &trans  &trans    &trans    &trans                                     &trans     &kp LS(LPAR)  &kp LS(RPAR)  &kp LBKT   &kp RBKT   &kp BSLH
&trans     &trans    &trans  &trans    &trans    &trans     &trans  &trans  &trans  &trans  &trans     &kp LBKT      &kp RBKT      &trans     &trans     &trans
                             &trans    &trans    &trans     &trans  &trans  &trans  &trans  &none      &trans        &trans
            >;

            display-name = "SYMBOLS";
        };

        FUNCTION {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                                        &kp F7    &kp F8          &kp F9        &kp F10    &kp F11  &kp F12
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans   &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans    &trans          &trans        &trans     &trans   &trans
                                          &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans    &trans          &trans
            >;

            label = "FUNCTIONS";
        };

        GAMING {
            bindings = <
&none  &none      &kp Q  &kp W  &kp E  &kp R                                  &none  &none  &none  &none  &none  &none
&none  &kp LSHFT  &kp A  &kp S  &kp D  &kp F                                  &none  &none  &none  &none  &none  &none
&none  &none      &none  &none  &none  &none  &trans     &none  &none  &none  &none  &none  &none  &none  &none  &none
                         &none  &none  &kp E  &kp SPACE  &kp R  &none  &none  &none  &none  &none
            >;

            label = "GAMING";
        };
    };
};
